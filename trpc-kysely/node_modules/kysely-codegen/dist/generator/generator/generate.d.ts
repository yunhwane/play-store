import type { Kysely } from 'kysely';
import type { DatabaseMetadata } from '../../introspector';
import type { GeneratorDialect } from '../dialect';
import type { Logger } from '../logger/logger';
import { type Overrides } from '../transformer/transformer';
import type { RuntimeEnumsStyle } from './runtime-enums-style';
import type { Serializer } from './serializer';
export type GenerateOptions = {
    camelCase?: boolean;
    db: Kysely<any>;
    defaultSchemas?: string[];
    dialect: GeneratorDialect;
    excludePattern?: string | null;
    includePattern?: string | null;
    logger?: Logger;
    outFile?: string | null;
    overrides?: Overrides;
    partitions?: boolean;
    print?: boolean;
    runtimeEnums?: boolean | RuntimeEnumsStyle;
    serializer?: Serializer;
    singularize?: boolean | Record<string, string>;
    skipAutogeneratedFileComment?: boolean;
    typeOnlyImports?: boolean;
    verify?: boolean;
};
export type SerializeFromMetadataOptions = Omit<GenerateOptions, 'db' | 'excludePattern' | 'includePattern' | 'outFile' | 'partitions' | 'print' | 'verify'> & {
    metadata: DatabaseMetadata;
    startTime?: number;
};
export declare const generate: (options: GenerateOptions) => Promise<string>;
export declare const serializeFromMetadata: (options: SerializeFromMetadataOptions) => string;
